{"version":3,"sources":["square.js","board.js","helpers/index.js","index.js"],"names":["Square","value","onClick","winner","className","Board","squares","list","slice","map","item","key","it","classwin","indexOf","lines","calculateWinner","i","length","a","b","c","Game","currentStatus","letter","history","Array","fill","position","stepMove","useState","current","setCurrent","state","setState","info","setInfo","useEffect","title","winnerRows","getRowWin","table","isFill","isFillList","jumpTo","s","target","parseInt","moves","step","move","desc","x","y","getPosition","newState","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcb06f4e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = ({value, onClick, winner}) => {\n\n\treturn (\n\t\t<button className={`square ${winner}`} onClick={onClick}>\n\t\t{value}\n\t    </button>\n\t);\n}\n\nexport default Square;","import React from 'react';\nimport Square from './square.js'\n\nconst Board = ({squares,onClick,winner}) => {\n  const list = winner.slice();\n  const index = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8]\n  ]\n  return (\n      <div>\n        {\n          index.map(item => \n            <div key={`key-${item[0]}`} className=\"board-row\">\n              {\n                item.map(it =>{\n                  let classwin = list.indexOf(it) >= 0 ? \"game-win\" : \"\";\n                  return (\n                    <Square key={it} value={squares[it]} winner={classwin} onClick={() => onClick(it)} /> \n                  )\n                })\n              }\n            </div>\n          )\n        }\n      </div>\n    )\n}\n\nexport default Board;","const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\nexport const calculateWinner = (squares) => {\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport const getRowWin = (squares) => {\n  \n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return lines[i];\n    }\n  }\n  return null;\n}\n\nexport const isFillList = (table) => {\n  let isFill = true\n  let i = 0\n  while(isFill && i < table.length) {\n    if (table[i] === null) {\n      isFill = false\n    }\n    i++\n  }\n  return isFill\n}\n\nexport const getPosition = (i) => {\n  let position = {}\n  if (i === 2 || i === 5 || i === 8) {\n    position.y = 3\n  } else if (i === 1 || i === 4 || i === 7) {\n    position.y = 2\n  } else {\n    position.y = 1\n  }\n  position.x = parseInt((i/3), 10) + 1\n  return position\n}\n\nexport const getLetter = (letter) => {\n  if (letter) {\n    return 'X'\n  }\n  return 'O'\n}\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './board'\nimport {calculateWinner, getRowWin, isFillList, getPosition} from './helpers'\n\n// ========================================\n\nconst Game = () => {\n  const squares = [{squares:Array(9).fill(null), position: {}}]\n  const currentStatus = {letter: true, history:squares, stepMove:0}\n\n  const [current, setCurrent] = useState()\n  const [state, setState] = useState(currentStatus)\n  const [info, setInfo] = useState({})\n\n  useEffect(() => {\n    const history = state.history\n    const current = history[state.stepMove].squares\n    const winner = calculateWinner(current);\n    const winnerRows = winner ? getRowWin(current) : [] \n    let title\n    if (winner) {\n      title = 'Winner: ' + winner;\n    } else {\n      if (isFillList(current)) {\n        title = 'ItÂ´s a tie'\n      } else {\n        title = 'Next player: ' + (state.letter ? 'X' : 'O');\n      }\n    }\n    setInfo({title, winnerRows})\n    setCurrent(current)\n  }, [state])\n\n  const handleClick = (i) => {\n    const history = state.history.slice(0, state.stepMove + 1);\n    const currents = history[history.length-1];\n    const squares = currents.squares.slice();\n    const position = getPosition(i)\n    if (calculateWinner(squares) || squares[i]) {\n     return \n    }\n\n    squares[i] = state.letter ? 'X' : 'O';\n\n    const newState = {\n      letter: !state.letter,\n      history: history.concat([{squares:squares, position:position}]),\n      stepMove: history.length,\n    }\n    setState(newState)\n  }\n\n  const jumpTo = (s) => {\n    const { value } = s.target;\n    setState({\n      ...state,\n      letter:(value % 2) === 0,\n      stepMove: parseInt(value,10)\n    })\n  }\n\n\n  const moves = state.history.map((step, move) => {\n    const desc = move ? \n      `Go to moce #${move} in fila: ${step.position.x} row ${step.position.y}`:\n      'Go to game start';\n    return (\n      <li key={move}>\n        <button value={move} onClick={jumpTo}>\n          {(state.stepMove === move && move !== 0) ? (<strong>{desc}</strong>) : (desc)}\n        </button>\n      </li>\n    );\n  });\n\n  \n  return (\n    <div className=\"game\">\n\n      <div className=\"game-board\">\n        { current ? (\n            <Board\n              winner={info.winnerRows}\n              squares={current}\n              onClick={handleClick}\n            />\n          ): \"Loading...\"\n          \n        }\n      </div>\n      <div className=\"game-info\">\n        <div>{info.title}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}